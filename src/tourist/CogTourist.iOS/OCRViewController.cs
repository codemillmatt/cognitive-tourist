// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using CogTourist.Core;
using Microsoft.ProjectOxford.Vision.Contract;
using System.IO;
using System.Threading.Tasks;
using CallKit;

namespace CogTourist
{
	public partial class OCRViewController : UIViewController
	{

		public OCRViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            descriptionLabel.Text = "Take or pick a photo!";

            var alert = UIAlertController.Create("OCR", "Pick or take a photo", UIAlertControllerStyle.ActionSheet);

            var photoAction = UIAlertAction.Create("Pick Photo", UIAlertActionStyle.Default, async (obj) =>
            {
                descriptionLabel.Text = "please wait...";

                var ps = new PhotoService();
                var photo = await ps.PickPhoto();

                if (photo == null)
                    return;

                theImage.Image = new UIImage(NSData.FromStream(photo));

                photo.Position = 0;

                PickLanguage(photo);
            });

            var cameraAction = UIAlertAction.Create("Take Photo", UIAlertActionStyle.Default, async (obj) =>
            {
                descriptionLabel.Text = "please wait...";

                var ps = new PhotoService();
                var photo = await ps.TakePhoto();

                var photoStream = photo?.GetStream();
                if (photoStream == null)
                    return;

                theImage.Image = new UIImage(NSData.FromStream(photoStream));

                photoStream.Position = 0;

                PickLanguage(photoStream);
            });

            alert.AddAction(photoAction);
            alert.AddAction(cameraAction);

            takePhotoButton.TouchUpInside += (sender, e) => PresentViewController(alert, true, null);
        }

        void PickLanguage(Stream incomingImage)
        {
            var englishAction = UIAlertAction.Create("English", UIAlertActionStyle.Default, async (obj) =>
            {
                await Translate(LanguageCodes.English, incomingImage);
            });

            var frenchAction = UIAlertAction.Create("French", UIAlertActionStyle.Default, async (obj) => await Translate(LanguageCodes.French, incomingImage));
            var germanAction = UIAlertAction.Create("German", UIAlertActionStyle.Default, async (obj) => await Translate(LanguageCodes.German, incomingImage));
            var italianAction = UIAlertAction.Create("Italian", UIAlertActionStyle.Default, async (obj) => await Translate(LanguageCodes.Italian, incomingImage));
            var spanishAction = UIAlertAction.Create("Spanish", UIAlertActionStyle.Default, async (obj) => await Translate(LanguageCodes.Spanish, incomingImage));

            var controller = UIAlertController.Create("Language", "What langauge is the photo in?", UIAlertControllerStyle.ActionSheet);
            controller.AddAction(englishAction);
            controller.AddAction(frenchAction);
            controller.AddAction(germanAction);
            controller.AddAction(italianAction);
            controller.AddAction(spanishAction);

           PresentViewController(controller, true, null);
        }

        async Task Translate(string language, Stream incomingImage)
        {
			var vs = new VisionService();
			var desc = await vs.OCRPhoto(incomingImage, language);

			var ts = new TranslateService();
			var translatedDesc = await ts.TranslateText(desc, language, LanguageCodes.English);

			descriptionLabel.Text = translatedDesc;
        }
	}
}
